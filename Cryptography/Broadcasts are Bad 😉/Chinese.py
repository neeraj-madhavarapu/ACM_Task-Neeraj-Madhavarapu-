import gmpy2
from gmpy2 import mpz

# Given values
e = 3

n1 = mpz(93500162517048641546787096055793757535647246115573452820070426952722839105259206386726342320373080028589838409420934957286736144380948165832820988099621769638760228520922601557891245459269555695273287461982149159244732888497451549014876606240205619538734235283434466606740831016126239969278127395932813972501)
ct1 = mpz(78406286729520927933597606356229817207730090348466337528850035686907731769583595879598630905387554797365268804265749503975166670245660278708562880234673953125)

n2 = mpz(69389646088454519961777612972795170975757344514768971340015442739948594078401371455619333135568702919584689527569525412014628819453197654891812622405663009392306477333014587313114349970319506949532748028160803547659404882094671572233644067789871312676667284969540366763124836901936574299355649024020474292507)
ct2 = mpz(78406286729520927933597606356229817207730090348466337528850035686907731769583595879598630905387554797365268804265749503975166670245660278708562880234673953125)

n3 = mpz(173343492679580453099087472373077831318468581021117934856501363981932357178004338045575880395223727472909876082267313542279706329989182144352883996336740679533245920391761546352887945995038709117785508115723234046039796085997076590595344206748962306765136674210538263394651485897800900761481602355016363501601)
ct3 = mpz(78406286729520927933597606356229817207730090348466337528850035686907731769583595879598630905387554797365268804265749503975166670245660278708562880234673953125)

# Function to compute Chinese Remainder Theorem (CRT)
def chinese_remainder_theorem(c, n):
    total = mpz(0)
    N = mpz(1)
    for ni in n:
        N *= ni

    for ci, ni in zip(c, n):
        mi = N // ni
        mi_inverse = gmpy2.invert(mi, ni)
        total += ci * mi * mi_inverse

    return total % N

# List of moduli and ciphertexts
n = [n1, n2, n3]
c = [ct1, ct2, ct3]

# Step 1: Apply the Chinese Remainder Theorem to get a combined ciphertext modulo n1 * n2 * n3
crt_result = chinese_remainder_theorem(c, n)

# Step 2: Take the cube root of the result to recover the original message
m, exact = gmpy2.iroot(crt_result, e)

# Check if cube root is exact
if exact:
    # Convert the message from integer to bytes
    message = gmpy2.to_binary(m).decode('utf-8', errors='ignore')
    print("Recovered message:", message)
else:
    print("Cube root was not exact, something went wrong.")
